[
	{
		"name": "sch1",
		"services": [
			{
				"type": "uds",
				"func": "if((readData[0]===0x50)&&(readData[1]===0x03)){\n\treturn true;\n}\nreturn false;",
				"service": {
					"name": "DiagnosticSessionControl",
					"value": 16
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 3,
						"suppress": false
					}
				],
				"date": 1591592685252
			},
			{
				"type": "uds",
				"func": "if((readData[0]===0x68)&&(readData[1]===0x03)){\n\treturn true;\n}\nreturn false;",
				"service": {
					"name": "CommunicationControl",
					"value": 40
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 3,
						"suppress": false
					},
					{
						"type": "input",
						"name": "communicationType",
						"communicationType": "03"
					}
				],
				"date": 1591592725644
			},
			{
				"type": "uds",
				"func": "if((readData[0]===0x50)&&(readData[1]===0x02)){\n\treturn true;\n}\nreturn false;",
				"service": {
					"name": "DiagnosticSessionControl",
					"value": 16
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 2,
						"suppress": false
					}
				],
				"date": 1591594495930
			},
			{
				"type": "uds",
				"func": "if ((0x67 === readData[0]) && \n    (0x01 === readData[1]))\n{\n    const crypto = require('crypto');\n    const algorithm = 'aes-128-cbc';\n    const iv = Buffer.alloc(16, 0); // Initialization vector.\n    const key=Buffer.from([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);\n    const cipher = crypto.createCipheriv(algorithm, key, iv);\n    var res=cipher.update(Buffer.from(readData.slice(2)));\n    //var res=cipher.final();\n    this.log(res.toString('hex'));\n    this.changeNextFrame('AccessData / securityKey',[...res]);\n    return true;\n}\nelse\n{\n    return false;\n}",
				"service": {
					"name": "SecurityAccess",
					"value": 39
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 1,
						"suppress": false
					},
					{
						"type": "input",
						"name": "AccessData / securityKey",
						"AccessData / securityKey": ""
					}
				]
			},
			{
				"type": "uds",
				"func": "if ((0x67 === readData[0]) && \n    (0x02 === readData[1]))\n{\n    return true;\n}\nelse\n{\n    return false;\n}",
				"service": {
					"name": "SecurityAccess",
					"value": 39
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 2,
						"suppress": false
					},
					{
						"type": "input",
						"name": "AccessData / securityKey",
						"AccessData / securityKey": ""
					}
				],
				"date": 1591593054755
			},
			{
				"type": "uds",
				"func": "if(readData[0]===0x6e){\n  return true;\n}\nreturn false;",
				"service": {
					"name": "WriteDataByIdentifier",
					"value": 46
				},
				"payload": [
					{
						"type": "input",
						"name": "dataIdentifier",
						"dataIdentifier": "f15a"
					},
					{
						"type": "input",
						"name": "dataRecord",
						"dataRecord": "5555"
					}
				],
				"date": 1591594547300
			},
			{
				"service": {
					"name": "DownloadFile1"
				},
				"type": "group",
				"subtable": [
					{
						"type": "uds",
						"func": "const crc16_table = new Uint16Array([\n0x0000, 0x365e, 0x6cbc, 0x5ae2, 0xd978, 0xef26, 0xb5c4, 0x839a,\n0xff89, 0xc9d7, 0x9335, 0xa56b, 0x26f1, 0x10af, 0x4a4d, 0x7c13,\n0xb26b, 0x8435, 0xded7, 0xe889, 0x6b13, 0x5d4d, 0x07af, 0x31f1,\n0x4de2, 0x7bbc, 0x215e, 0x1700, 0x949a, 0xa2c4, 0xf826, 0xce78,\n0x29af, 0x1ff1, 0x4513, 0x734d, 0xf0d7, 0xc689, 0x9c6b, 0xaa35,\n0xd626, 0xe078, 0xba9a, 0x8cc4, 0x0f5e, 0x3900, 0x63e2, 0x55bc,\n0x9bc4, 0xad9a, 0xf778, 0xc126, 0x42bc, 0x74e2, 0x2e00, 0x185e,\n0x644d, 0x5213, 0x08f1, 0x3eaf, 0xbd35, 0x8b6b, 0xd189, 0xe7d7,\n0x535e, 0x6500, 0x3fe2, 0x09bc, 0x8a26, 0xbc78, 0xe69a, 0xd0c4,\n0xacd7, 0x9a89, 0xc06b, 0xf635, 0x75af, 0x43f1, 0x1913, 0x2f4d,\n0xe135, 0xd76b, 0x8d89, 0xbbd7, 0x384d, 0x0e13, 0x54f1, 0x62af,\n0x1ebc, 0x28e2, 0x7200, 0x445e, 0xc7c4, 0xf19a, 0xab78, 0x9d26,\n0x7af1, 0x4caf, 0x164d, 0x2013, 0xa389, 0x95d7, 0xcf35, 0xf96b,\n0x8578, 0xb326, 0xe9c4, 0xdf9a, 0x5c00, 0x6a5e, 0x30bc, 0x06e2,\n0xc89a, 0xfec4, 0xa426, 0x9278, 0x11e2, 0x27bc, 0x7d5e, 0x4b00,\n0x3713, 0x014d, 0x5baf, 0x6df1, 0xee6b, 0xd835, 0x82d7, 0xb489,\n0xa6bc, 0x90e2, 0xca00, 0xfc5e, 0x7fc4, 0x499a, 0x1378, 0x2526,\n0x5935, 0x6f6b, 0x3589, 0x03d7, 0x804d, 0xb613, 0xecf1, 0xdaaf,\n0x14d7, 0x2289, 0x786b, 0x4e35, 0xcdaf, 0xfbf1, 0xa113, 0x974d,\n0xeb5e, 0xdd00, 0x87e2, 0xb1bc, 0x3226, 0x0478, 0x5e9a, 0x68c4,\n0x8f13, 0xb94d, 0xe3af, 0xd5f1, 0x566b, 0x6035, 0x3ad7, 0x0c89,\n0x709a, 0x46c4, 0x1c26, 0x2a78, 0xa9e2, 0x9fbc, 0xc55e, 0xf300,\n0x3d78, 0x0b26, 0x51c4, 0x679a, 0xe400, 0xd25e, 0x88bc, 0xbee2,\n0xc2f1, 0xf4af, 0xae4d, 0x9813, 0x1b89, 0x2dd7, 0x7735, 0x416b,\n0xf5e2, 0xc3bc, 0x995e, 0xaf00, 0x2c9a, 0x1ac4, 0x4026, 0x7678,\n0x0a6b, 0x3c35, 0x66d7, 0x5089, 0xd313, 0xe54d, 0xbfaf, 0x89f1,\n0x4789, 0x71d7, 0x2b35, 0x1d6b, 0x9ef1, 0xa8af, 0xf24d, 0xc413,\n0xb800, 0x8e5e, 0xd4bc, 0xe2e2, 0x6178, 0x5726, 0x0dc4, 0x3b9a,\n0xdc4d, 0xea13, 0xb0f1, 0x86af, 0x0535, 0x336b, 0x6989, 0x5fd7,\n0x23c4, 0x159a, 0x4f78, 0x7926, 0xfabc, 0xcce2, 0x9600, 0xa05e,\n0x6e26, 0x5878, 0x029a, 0x34c4, 0xb75e, 0x8100, 0xdbe2, 0xedbc,\n0x91af, 0xa7f1, 0xfd13, 0xcb4d, 0x48d7, 0x7e89, 0x246b, 0x1235\n]);\nvar crcResult = 0x00;\nfunction crc16_byte(crc, data){\n    return (crc >> 8) ^ crc16_table[(crc ^ data) & 0xff];\n}\nfunction Crc16DNP(crc, data)\n{\n    for(var i in data){\n        crc = crc16_byte(crc,data[i]);\n    }\n    return crc;\n}\nif(readData[0]!=0x74){\n  return false;\n}\n/*calculate bs*/\nvar len = (readData[1] & 0xf0) >> 4;\nif(len+2!=readData.length){\n  return false;\n}\nvar bs=0;\nfor (var i = 0; i < len; i++) {\n  bs += readData[2 + i] * Math.pow(256, (len - 1 - i))\n}\nif(bs<=2){\n  /*service number and blocknum*/\n  return false;\n}\nbs-=2;\n\n/*align with 8 bytes*/\nif(bs & 0x07)\n{\n    bs -= (bs & 0x07);\n}\n\nthis.openFile(writeData[0]['Download File'].name,'r');\n\nvar payload=[];\nvar bn=1;\nvar size=parseInt(writeData[4].memorySize,16);\nvar data;\nif(size>bs){\n  data=this.readFile(bs);\n  if(data.length!=bs){\n    this.log(\"file no enough data\");\n    return false;\n  }\n  size-=bs;\n}else{\n  data=this.readFile(size);\n  if(data.length!=size){\n    this.log(\"file no enough data\");\n    return false;\n  }\n  size=0;\n}\npayload.push({\n  type:\"number\",\n  name:'blockNum',\n  blockNum:bn,\n});\n\ncrcResult = Crc16DNP(crcResult, data);\n\npayload.push({\n  type:\"input\",\n  name:'data',\n  data:data,\n});\n\nvar insertCRC  = (writeData, readData) => {\n    var crcBuffer = Buffer.alloc(4, 0);\n    crcResult = ((~crcResult) & 0xFFFF);\n    crcBuffer.writeUInt32BE(crcResult);\n    this.changeNextFrame('routineControlOptionRecord', [...crcBuffer]); \n    return true;\n}\n\nvar check=(writeData,readData)=>{\n  if(writeData[0].blockNum!=readData[1]){\n    return false;\n  }\n  if(size==0){\n    this.insertItem(0x37, [], insertCRC);\n    this.closeFile()\n  }else{\n    if(size>bs){\n      data=this.readFile(bs);\n      if(data.length!=bs){\n        this.log(\"file no enough data\");\n        return false;\n      }\n      size-=bs;\n    }else{\n      data=this.readFile(size);\n      if(data.length!=size){\n        this.log(\"file no enough data\");\n        return false;\n      }\n      size=0;\n    }\n    crcResult = Crc16DNP(crcResult, data);\n    bn++;\n    if(bn==256){\n      bn=0;\n    }\n    payload=[]\n    payload.push({\n      type:\"number\",\n      name:'blockNum',\n      blockNum:bn,\n    });\n    payload.push({\n      type:\"input\",\n      name:'data',\n      data:data,\n    });\n    this.insertItem(0x36,payload,check);\n  }\n  return true;\n}\nthis.insertItem(0x36,payload,check);\nreturn true;",
						"service": {
							"name": "RequestDownload",
							"value": 52
						},
						"payload": [
							{
								"type": "downloadFile",
								"name": "Download File",
								"Download File": {
									"name": "MPC5744_TestFlashDriver2.bin",
									"size": 2128
								}
							},
							{
								"type": "input",
								"name": "dataFormatIdentifier",
								"dataFormatIdentifier": "00"
							},
							{
								"type": "input",
								"name": "addressAndLengthFormatIdentifier",
								"addressAndLengthFormatIdentifier": "44"
							},
							{
								"type": "input",
								"name": "memoryAddress",
								"memoryAddress": "40000000"
							},
							{
								"type": "input",
								"name": "memorySize",
								"memorySize": "len($['Download File'].size,parseInt($['addressAndLengthFormatIdentifier'],16)&0xf)"
							}
						],
						"date": 1591327783898,
						"preFunc": "",
						"desc": ""
					}
				]
			},
			{
				"type": "uds",
				"func": "var rxCheck=[0x71,0x01,0x02,0x02,0];\nvar i;\nfor(i in rxCheck){\n  if(rxCheck[i]!==readData[i]){\n  \treturn false;\n  }\n}\nreturn true;",
				"service": {
					"name": "RoutineControl",
					"value": 49
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 1,
						"suppress": false
					},
					{
						"type": "input",
						"name": "routineIdentifier",
						"routineIdentifier": "0202"
					},
					{
						"type": "input",
						"name": "routineControlOptionRecord",
						"routineControlOptionRecord": ""
					},
					{
						"type": "text",
						"name": "routineControlOptionRecord-ascii",
						"routineControlOptionRecord-ascii": ""
					}
				]
			},
			{
				"type": "uds",
				"func": "var rxCheck=[0x71,0x1,0xff,0x00,0];\nvar i;\nfor(i in rxCheck){\n  if(rxCheck[i]!==readData[i]){\n  \treturn false;\n  }\n}\nreturn true;",
				"service": {
					"name": "RoutineControl",
					"value": 49
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 1,
						"suppress": false
					},
					{
						"type": "input",
						"name": "routineIdentifier",
						"routineIdentifier": "ff00"
					},
					{
						"type": "input",
						"name": "routineControlOptionRecord",
						"routineControlOptionRecord": ""
					},
					{
						"type": "text",
						"name": "routineControlOptionRecord-ascii",
						"routineControlOptionRecord-ascii": ""
					}
				],
				"date": 1591595087338
			},
			{
				"service": {
					"name": "DownloadFile1"
				},
				"type": "group",
				"subtable": [
					{
						"type": "uds",
						"func": "const crc16_table = new Uint16Array([\n0x0000, 0x365e, 0x6cbc, 0x5ae2, 0xd978, 0xef26, 0xb5c4, 0x839a,\n0xff89, 0xc9d7, 0x9335, 0xa56b, 0x26f1, 0x10af, 0x4a4d, 0x7c13,\n0xb26b, 0x8435, 0xded7, 0xe889, 0x6b13, 0x5d4d, 0x07af, 0x31f1,\n0x4de2, 0x7bbc, 0x215e, 0x1700, 0x949a, 0xa2c4, 0xf826, 0xce78,\n0x29af, 0x1ff1, 0x4513, 0x734d, 0xf0d7, 0xc689, 0x9c6b, 0xaa35,\n0xd626, 0xe078, 0xba9a, 0x8cc4, 0x0f5e, 0x3900, 0x63e2, 0x55bc,\n0x9bc4, 0xad9a, 0xf778, 0xc126, 0x42bc, 0x74e2, 0x2e00, 0x185e,\n0x644d, 0x5213, 0x08f1, 0x3eaf, 0xbd35, 0x8b6b, 0xd189, 0xe7d7,\n0x535e, 0x6500, 0x3fe2, 0x09bc, 0x8a26, 0xbc78, 0xe69a, 0xd0c4,\n0xacd7, 0x9a89, 0xc06b, 0xf635, 0x75af, 0x43f1, 0x1913, 0x2f4d,\n0xe135, 0xd76b, 0x8d89, 0xbbd7, 0x384d, 0x0e13, 0x54f1, 0x62af,\n0x1ebc, 0x28e2, 0x7200, 0x445e, 0xc7c4, 0xf19a, 0xab78, 0x9d26,\n0x7af1, 0x4caf, 0x164d, 0x2013, 0xa389, 0x95d7, 0xcf35, 0xf96b,\n0x8578, 0xb326, 0xe9c4, 0xdf9a, 0x5c00, 0x6a5e, 0x30bc, 0x06e2,\n0xc89a, 0xfec4, 0xa426, 0x9278, 0x11e2, 0x27bc, 0x7d5e, 0x4b00,\n0x3713, 0x014d, 0x5baf, 0x6df1, 0xee6b, 0xd835, 0x82d7, 0xb489,\n0xa6bc, 0x90e2, 0xca00, 0xfc5e, 0x7fc4, 0x499a, 0x1378, 0x2526,\n0x5935, 0x6f6b, 0x3589, 0x03d7, 0x804d, 0xb613, 0xecf1, 0xdaaf,\n0x14d7, 0x2289, 0x786b, 0x4e35, 0xcdaf, 0xfbf1, 0xa113, 0x974d,\n0xeb5e, 0xdd00, 0x87e2, 0xb1bc, 0x3226, 0x0478, 0x5e9a, 0x68c4,\n0x8f13, 0xb94d, 0xe3af, 0xd5f1, 0x566b, 0x6035, 0x3ad7, 0x0c89,\n0x709a, 0x46c4, 0x1c26, 0x2a78, 0xa9e2, 0x9fbc, 0xc55e, 0xf300,\n0x3d78, 0x0b26, 0x51c4, 0x679a, 0xe400, 0xd25e, 0x88bc, 0xbee2,\n0xc2f1, 0xf4af, 0xae4d, 0x9813, 0x1b89, 0x2dd7, 0x7735, 0x416b,\n0xf5e2, 0xc3bc, 0x995e, 0xaf00, 0x2c9a, 0x1ac4, 0x4026, 0x7678,\n0x0a6b, 0x3c35, 0x66d7, 0x5089, 0xd313, 0xe54d, 0xbfaf, 0x89f1,\n0x4789, 0x71d7, 0x2b35, 0x1d6b, 0x9ef1, 0xa8af, 0xf24d, 0xc413,\n0xb800, 0x8e5e, 0xd4bc, 0xe2e2, 0x6178, 0x5726, 0x0dc4, 0x3b9a,\n0xdc4d, 0xea13, 0xb0f1, 0x86af, 0x0535, 0x336b, 0x6989, 0x5fd7,\n0x23c4, 0x159a, 0x4f78, 0x7926, 0xfabc, 0xcce2, 0x9600, 0xa05e,\n0x6e26, 0x5878, 0x029a, 0x34c4, 0xb75e, 0x8100, 0xdbe2, 0xedbc,\n0x91af, 0xa7f1, 0xfd13, 0xcb4d, 0x48d7, 0x7e89, 0x246b, 0x1235\n]);\nvar crcResult = 0x00;\nfunction crc16_byte(crc, data){\n    return (crc >> 8) ^ crc16_table[(crc ^ data) & 0xff];\n}\nfunction Crc16DNP(crc, data)\n{\n    for(var i in data){\n        crc = crc16_byte(crc,data[i]);\n    }\n    return crc;\n}\nif(readData[0]!=0x74){\n  return false;\n}\n/*calculate bs*/\nvar len = (readData[1] & 0xf0) >> 4;\nif(len+2!=readData.length){\n  return false;\n}\nvar bs=0;\nfor (var i = 0; i < len; i++) {\n  bs += readData[2 + i] * Math.pow(256, (len - 1 - i))\n}\nif(bs<=2){\n  /*service number and blocknum*/\n  return false;\n}\nbs-=2;\n/*align with 8 bytes*/\nif(bs & 0x07)\n{\n    bs -= (bs & 0x07);\n}\n\nthis.openFile(writeData[0]['Download File'].name,'r');\n\nvar payload=[];\nvar bn=1;\nvar size=parseInt(writeData[4].memorySize,16);\nvar data;\nif(size>bs){\n  data=this.readFile(bs);\n  if(data.length!=bs){\n    this.log(\"file no enough data\");\n    return false;\n  }\n  size-=bs;\n}else{\n  data=this.readFile(size);\n  if(data.length!=size){\n    this.log(\"file no enough data\");\n    return false;\n  }\n  size=0;\n}\npayload.push({\n  type:\"number\",\n  name:'blockNum',\n  blockNum:bn,\n});\n\ncrcResult = Crc16DNP(crcResult, data);\n\npayload.push({\n  type:\"input\",\n  name:'data',\n  data:data,\n});\n\nvar insertCRC  = (writeData, readData) => {\n    var crcBuffer = Buffer.alloc(4, 0);\n    crcResult = ((~crcResult) & 0xFFFF);\n    crcBuffer.writeUInt32BE(crcResult);\n    this.changeNextFrame('routineControlOptionRecord', [...crcBuffer]); \n    return true;\n}\n\nvar check=(writeData,readData)=>{\n  if(writeData[0].blockNum!=readData[1]){\n    return false;\n  }\n  if(size==0){\n    this.insertItem(0x37, [], insertCRC);\n    this.closeFile()\n  }else{\n    if(size>bs){\n      data=this.readFile(bs);\n      if(data.length!=bs){\n        this.log(\"file no enough data\");\n        return false;\n      }\n      size-=bs;\n    }else{\n      data=this.readFile(size);\n      if(data.length!=size){\n        this.log(\"file no enough data\");\n        return false;\n      }\n      size=0;\n    }\n    crcResult = Crc16DNP(crcResult, data);\n    bn++;\n    if(bn==256){\n      bn=0;\n    }\n    payload=[]\n    payload.push({\n      type:\"number\",\n      name:'blockNum',\n      blockNum:bn,\n    });\n    payload.push({\n      type:\"input\",\n      name:'data',\n      data:data,\n    });\n    this.insertItem(0x36,payload,check);\n  }\n  return true;\n}\nthis.insertItem(0x36,payload,check);\nreturn true;",
						"service": {
							"name": "RequestDownload",
							"value": 52
						},
						"payload": [
							{
								"type": "downloadFile",
								"name": "Download File",
								"Download File": {
									"name": "LedApp.bin",
									"size": 63436
								}
							},
							{
								"type": "input",
								"name": "dataFormatIdentifier",
								"dataFormatIdentifier": "00"
							},
							{
								"type": "input",
								"name": "addressAndLengthFormatIdentifier",
								"addressAndLengthFormatIdentifier": "44"
							},
							{
								"type": "input",
								"name": "memoryAddress",
								"memoryAddress": "01000000"
							},
							{
								"type": "input",
								"name": "memorySize",
								"memorySize": "len($['Download File'].size,parseInt($['addressAndLengthFormatIdentifier'],16)&0xf)"
							}
						],
						"date": 1591327783898,
						"preFunc": "",
						"desc": ""
					}
				]
			},
			{
				"type": "uds",
				"func": "var rxCheck=[0x71,0x01,0x02,0x02,0];\nvar i;\nfor(i in rxCheck){\n  if(rxCheck[i]!==readData[i]){\n  \treturn false;\n  }\n}\nreturn true;",
				"service": {
					"name": "RoutineControl",
					"value": 49
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 1,
						"suppress": false
					},
					{
						"type": "input",
						"name": "routineIdentifier",
						"routineIdentifier": "0202"
					},
					{
						"type": "input",
						"name": "routineControlOptionRecord",
						"routineControlOptionRecord": ""
					},
					{
						"type": "text",
						"name": "routineControlOptionRecord-ascii",
						"routineControlOptionRecord-ascii": ""
					}
				]
			},
			{
				"type": "uds",
				"func": "var rxCheck=[0x71];\nvar i;\nfor(i in rxCheck){\n  if(rxCheck[i]!==readData[i]){\n  \treturn false;\n  }\n}\nreturn true;",
				"service": {
					"name": "RoutineControl",
					"value": 49
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 1,
						"suppress": false
					},
					{
						"type": "input",
						"name": "routineIdentifier",
						"routineIdentifier": "ff01"
					},
					{
						"type": "input",
						"name": "routineControlOptionRecord",
						"routineControlOptionRecord": ""
					},
					{
						"type": "text",
						"name": "routineControlOptionRecord-ascii",
						"routineControlOptionRecord-ascii": ""
					}
				],
				"date": 1591595282976
			},
			{
				"type": "uds",
				"func": "if(readData[0]===0x51){\n\treturn true;\n}\nreturn false;",
				"service": {
					"name": "ECUReset",
					"value": 17
				},
				"payload": [
					{
						"type": "subfunction",
						"name": "subFunction",
						"subFunction": 1,
						"suppress": false
					}
				],
				"date": 1591595329897
			}
		]
	}
]