=============================================================================
List of generated methods in project: MPC5744_bootloader

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetOutputBuffer -This function configures the output buffer
   - pin_mux_PINS_DRV_SetInputBuffer -This function configures the input buffer
   - pin_mux_PINS_DRV_ConfigIntFilterClock -This function configures the interrupt filter clock prescaler
   - pin_mux_PINS_DRV_SetExInt -This function configures the external interrupt
   - pin_mux_PINS_DRV_ClearPinExIntFlag -This function clears the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_GetPinExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearExIntFlag -This function clears the entire external interrupt status flag
   - pin_mux_PINS_DRV_GetExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_SetSoftwareIRQRequest -Set software interrupt request.
   - intMan1_INT_SYS_ClearSoftwareIRQRequest -Clear software interrupt request.
   - intMan1_INT_SYS_EnableIRQ_MC -Enables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_GetCoresForIRQ -Gets the cores on which an interrupt for the specified IRQ number is enabled.
   - intMan1_INT_SYS_DisableIRQ_MC -Disables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_DisableIRQ_MC_All -Disables an interrupt for a given IRQ number, on all cores.

Module "canCom0"   (component flexcan)
   - canCom0_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom0_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom0_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom0_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom0_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom0_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom0_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom0_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom0_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom0_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - canCom0_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom0_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom0_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom0_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom0_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom0_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom0_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom0_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom0_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom0_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom0_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - canCom0_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom0_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - canCom0_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - canCom0_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - canCom0_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA virtualChannel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA virtualChannel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA virtualChannel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the virtualChannel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the virtualChannel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the virtualChannel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the virtualChannel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the virtualChannel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current virtualChannel.

Module "wdg_pal1"  (component wdg_pal)
   - wdg_pal1_WDG_Init -This function initializes the WDG instance by user configuration.
   - wdg_pal1_WDG_Deinit -This function resets all configuration to default and disable the WDG PAL instance.
   - wdg_pal1_WDG_GetDefaultConfig -Gets default configuration of the WDG PAL.
   - wdg_pal1_WDG_Refresh -Refreshes the WDG PAL counter.
   - wdg_pal1_WDG_SetInt -Set interrupt for WDG PAL.This function enables/disables the WDG PAL timeout interrupt and sets a 
                function to be called when a timeout interrupt is received, before reset.
   - wdg_pal1_WDG_SetTimeout -Sets the value of the WDG PAL timeout. This function sets the value of the WDG PAL timeout.
   - wdg_pal1_WDG_SetWindow -Set window mode and window value of the WDG PAL. This function set window mode, window value is 
                set when window mode enabled.
   - wdg_pal1_WDG_GetCounter -Gets the value of the WDG PAL counter. This function gets counter of WDG PAL module.
   - wdg_pal1_WDG_ClearIntFlag -This function clears the Timeout Interrupt Flag.

Module "uart_pal1" (component uart_pal)
   - uart_pal1_UART_GetDefaultConfig -Gets the default configuration structure.
   - uart_pal1_UART_Init -Initializes the uart module.
   - uart_pal1_UART_Deinit -De-initializes the uart module.
   - uart_pal1_UART_SetBaudRate -Configures the UART baud rate.
   - uart_pal1_UART_GetBaudRate -Returns the UART baud rate.
   - uart_pal1_UART_SendDataBlocking -Perform a blocking UART transmission.
   - uart_pal1_UART_SendData -Perform a non-blocking UART transmission.
   - uart_pal1_UART_AbortSendingData -Terminates a non-blocking transmission early.
   - uart_pal1_UART_GetTransmitStatus -Get the status of the current non-blocking UART transmission.
   - uart_pal1_UART_ReceiveDataBlocking -Perform a blocking UART reception.
   - uart_pal1_UART_ReceiveData -Perform a non-blocking UART reception.
   - uart_pal1_UART_AbortReceivingData -Terminates a non-blocking reception early.
   - uart_pal1_UART_GetReceiveStatus -Get the status of the current non-blocking UART reception.
   - uart_pal1_UART_SetRxBuffer -Provide a buffer for receiving data.
   - uart_pal1_UART_SetTxBuffer -Provide a buffer for transmitting data.

Module "eTimer1"   (component etimer)
   - eTimer1_ETIMER_DRV_Init -Initializes the ETIMER module.
   - eTimer1_ETIMER_DRV_Deinit -De-Initializes the ETIMER module.
   - eTimer1_ETIMER_DRV_GetDefaultChannelConfig -Gets the default configuration structure.
   - eTimer1_ETIMER_DRV_GetDefaultChannelConfigOneshot -Gets the default configuration structure for ONE SHOT mode.
   - eTimer1_ETIMER_DRV_GetDefaultChannelConfigPulseOutput -Gets the default configuration structure for PULSE-OUTPUT mode.
   - eTimer1_ETIMER_DRV_GetDefaultChannelConfigFixedFreqPwm -Gets the default configuration structure for FIXED-FREQUENCY PWM 
                mode.
   - eTimer1_ETIMER_DRV_GetDefaultChannelConfigVariableFreqPwm -Gets the default configuration structure for VARIABLE-FREQUENCY 
                PWM mode.
   - eTimer1_ETIMER_DRV_GetDefaultChannelConfigModuleCountingDirection -Gets the default configuration structure for MODULO 
                COUNTING with direction mode.
   - eTimer1_ETIMER_DRV_GetDefaultChannelConfigModuleCountingQuadrature -Gets the default configuration structure for MODULO 
                COUNTING quadrature mode.
   - eTimer1_ETIMER_DRV_GetDefaultDmaChannel -Gets the default configuration structure for DMA access.
   - eTimer1_ETIMER_DRV_InitChannel -Initializes the ETIMER channel.
   - eTimer1_ETIMER_DRV_DmaInitRequest -Initializes specified DMA channel for the ETIMER module.
   - eTimer1_ETIMER_DRV_ChannelDebugBehaviour -Controls the way each channel behaves when using a HW debugger.
   - eTimer1_ETIMER_DRV_StartTimerChannels -Starts the timer channel counting.
   - eTimer1_ETIMER_DRV_StopTimerChannels -Stops the timer channel counting.
   - eTimer1_ETIMER_DRV_IsTimerRunning -Checks if the given channel is running.
   - eTimer1_ETIMER_DRV_SetTimerTicks -Sets the timer channel period in count units.
   - eTimer1_ETIMER_DRV_GetTimerTicks -Gets the current timer channel counting value in counts.
   - eTimer1_ETIMER_DRV_SetTimerTicksBuffered -Sets the timer channel period in count units.
   - eTimer1_ETIMER_DRV_EnableInterruptSource -Enables the interrupt source for a timer channel.
   - eTimer1_ETIMER_DRV_DisableInterruptSource -Disables the interrupt source for a timer channel.
   - eTimer1_ETIMER_DRV_EnableDisableInterruptSources -Enables and disables the interrupt sources for a timer channel.
   - eTimer1_ETIMER_DRV_GetInterruptStatus -Gets the current interrupt flag of timer channels.
   - eTimer1_ETIMER_DRV_ClearInterruptStatus -Clears the interrupt flag of timer channels.
   - eTimer1_ETIMER_DRV_GetInterruptNumber -Returns the system interrupt vector number.
   - eTimer1_ETIMER_DRV_SetCompareThreshold -Set both compare registers directly.
   - eTimer1_ETIMER_DRV_SetCompareThresholdBuffered -Set both compare registers directly.
   - eTimer1_ETIMER_DRV_OutputPinEnable -Enable signal output to external pin.
   - eTimer1_ETIMER_DRV_OutputPinDisable -Disable signal output to external pin.
   - eTimer1_ETIMER_DRV_StartCapture -Start input capture.
   - eTimer1_ETIMER_DRV_StopCapture -Stop an input capture.
   - eTimer1_ETIMER_DRV_GetCaptureValue -Read a captured value, this does not account for timer overflows.
   - eTimer1_ETIMER_DRV_GetCaptureConfigWords -Returns the maximum number of captured words that can be stored in the HW FIFO.
   - eTimer1_ETIMER_DRV_GetCaptureWords -Returns how many captured words are stored in the HW FIFO.
   - eTimer1_ETIMER_DRV_SetWatchdog -Sets the watchdog value directly.
   - eTimer1_ETIMER_DRV_DisableWatchdog -Stops the watchdog timer.
   - eTimer1_ETIMER_DRV_ForceOutputLogicLevel -Force output to logic level.
   - eTimer1_ETIMER_DRV_GetCompareThresholdBuffered -Read the values stored in the buffer compare registers.
   - eTimer1_ETIMER_DRV_ReloadOnCompare -Reset the counter to specified value.
   - eTimer1_ETIMER_DRV_SetOutputFunction -Set way the output behaves.

Module "fccu1"     (component fccu)
   - fccu1_FCCU_DRV_GetChipMode -Capture chip modes base on last event selected
   - fccu1_FCCU_DRV_DisableFault -Disable Fault Number.
   - fccu1_FCCU_DRV_ClearFaults -Clear NonCritical Faults Status.
   - fccu1_FCCU_DRV_ReadFaults -Read NonCritical Faults Status.
   - fccu1_FCCU_DRV_RunOperation -Run Operation issued by user.
   - fccu1_FCCU_DRV_LockConfig -Locks the configuration.
   - fccu1_FCCU_DRV_IrqStatusSetEvent -Set Event for triggered interrupt in FCCU IRQ Status.
   - fccu1_FCCU_DRV_IrqStatusGetEvent -Get Event for triggered interrupt in FCCU IRQ Status.
   - fccu1_FCCU_DRV_IrqAlarmCallback -Checks the instaled Callbacks in case of alarm.
   - fccu1_FCCU_DRV_IrqHandler -Global Interrupt FCCU Handler.
   - fccu1_FCCU_DRV_GetConfigState -Update and Read FCCU Status.
   - fccu1_FCCU_DRV_Init -Inititilize FCCU Module and NonCritical Faults.
   - fccu1_FCCU_DRV_SetConfigState -Set FCCU Module in configuration mode.
   - fccu1_FCCU_DRV_SetNormalState -Set FCCU Module in normal mode.
   - fccu1_FCCU_DRV_SetStateTimer -Set Time Out Interval that permits the FCCU module to be set in configuration mode.
   - fccu1_FCCU_DRV_SetNcfConfig -Set and configure NonCritical Faults.
   - fccu1_FCCU_DRV_GetFreezeStatus -Get the value of freeze status registers.
   - fccu1_FCCU_DRV_ClearAllFreezeStatus -Clear of freeze status registers.
   - fccu1_FCCU_DRV_EoutSet -Update the configuration of EOUT signals.
   - fccu1_FCCU_DRV_GetXtmrValue -Update the Timer Value and return it.
   - fccu1_FCCU_DRV_SetNcfFake -Set a NonCritical Fault Fake for test.
   - fccu1_FCCU_DRV_Deinit -Inititilize FCCU Module and NonCritical Faults.
   - fccu1_FCCU0_IRQ_Handler -Wrapper for Global Interrupt FCCU Handler.

Module "Cpu"       (component MPC5744P_257)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.
   - Cpu_SystemSoftwareReset -This method initiates a software rest of the microcontroller.

===================================================================================
