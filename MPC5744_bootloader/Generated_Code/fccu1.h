/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : fccu1.h
**     Project     : MPC5744_bootloader
**     Processor   : MPC5744P_257
**     Component   : fccu
**     Version     : Component C55_Repository, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_S32_PA_11
**     Compiler    : GNU C Compiler
**     Date/Time   : 2022-10-03, 15:41, # CodeGen: 27
**     Contents    :
**         FCCU_DRV_GetChipMode          - void FCCU_DRV_GetChipMode(const uint32_t instance, fccu_chip_mode_t...
**         FCCU_DRV_DisableFault         - status_t FCCU_DRV_DisableFault(const uint32_t instance,uint8_t faultIdx);
**         FCCU_DRV_ClearFaults          - status_t FCCU_DRV_ClearFaults(const uint32_t instance,uint8_t faultIdx);
**         FCCU_DRV_ReadFaults           - void FCCU_DRV_ReadFaults(const uint32_t instance,fccu_faults_flags_t * param);
**         FCCU_DRV_RunOperation         - void FCCU_DRV_RunOperation(const uint32_t instance,const fccu_op_run_t...
**         FCCU_DRV_LockConfig           - void FCCU_DRV_LockConfig(const uint32_t instance,const fccu_lock_type_t lock);
**         FCCU_DRV_IrqStatusSetEvent    - void FCCU_DRV_IrqStatusSetEvent(fccu_isr_state_t *const param,const...
**         FCCU_DRV_IrqStatusGetEvent    - void FCCU_DRV_IrqStatusGetEvent(const fccu_isr_state_t *const...
**         FCCU_DRV_IrqAlarmCallback     - void FCCU_DRV_IrqAlarmCallback(const uint32_t instance);
**         FCCU_DRV_IrqHandler           - void FCCU_DRV_IrqHandler(const uint32_t instance);
**         FCCU_DRV_GetConfigState       - fccu_status_t FCCU_DRV_GetConfigState(const uint32_t instance);
**         FCCU_DRV_Init                 - status_t FCCU_DRV_Init(const uint32_t instance,fccu_control_t...
**         FCCU_DRV_SetConfigState       - status_t FCCU_DRV_SetConfigState(const uint32_t instance);
**         FCCU_DRV_SetNormalState       - status_t FCCU_DRV_SetNormalState(const uint32_t instance);
**         FCCU_DRV_SetStateTimer        - status_t FCCU_DRV_SetStateTimer(const uint32_t instance,uint8_t value);
**         FCCU_DRV_SetNcfConfig         - status_t FCCU_DRV_SetNcfConfig(const uint32_t instance,fccu_config_ncf_t...
**         FCCU_DRV_GetFreezeStatus      - status_t FCCU_DRV_GetFreezeStatus(const uint32_t instance,const...
**         FCCU_DRV_ClearAllFreezeStatus - status_t FCCU_DRV_ClearAllFreezeStatus(const uint32_t instance);
**         FCCU_DRV_EoutSet              - status_t FCCU_DRV_EoutSet(const uint32_t instance,const fccu_eout_config_t...
**         FCCU_DRV_GetXtmrValue         - uint32_t FCCU_DRV_GetXtmrValue(const uint32_t instance,fccu_xtmr_type_t type);
**         FCCU_DRV_SetNcfFake           - void FCCU_DRV_SetNcfFake(const uint32_t instance, const uint8_t ncfValue);
**         FCCU_DRV_Deinit               - status_t FCCU_DRV_Deinit(const uint32_t instance);
**         FCCU0_IRQ_Handler             - void FCCU0_IRQ_Handler(void);
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc. 
**     Copyright 2016-2017 NXP 
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file fccu1.h
** @version 01.00
*/         
/*!
**  @addtogroup fccu1_module fccu1 module documentation
**  @{
*/         
#ifndef fccu1_H
#define fccu1_H
/* MODULE fccu1. */

/**
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, global macro not referenced
 * There are global macros defined to be used by the integrator and another one used as include guard.
 */

/* Include inherited beans */
#include "Cpu.h"
#include "fccu_driver.h"
#include <stdlib.h>

/*! @brief Device instance number */
#define INST_FCCU1 0U

/*! @brief Noncritical fault configuration 0 */
/*! @brief Number 0 */
extern const fccu_config_ncf_t fccu1_NcfConfig0_0;
/*! @brief Configuration 0 */
extern const fccu_config_ncf_t * fccu1_NcfConfig0[1U];


/*! @brief EOUT configuration */
/*! @brief Configuration 0 */
extern const fccu_eout_config_t fccu1_EoutConfig0;


/*! @brief Control configuration */
/*! @brief Configuration 0 */
extern const fccu_control_t fccu1_Control0;


/*! @brief Module callbacks external declaration */

#endif
/* ifndef fccu1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/
